{"ast":null,"code":"var _jsxFileName = \"/home/issam/Desktop/WebDev/Barmej_Bootcamp/03_ReactJS_/Project/Fullstck-Project-4-master/src/pages/ProductPage.js\";\nimport React from 'react';\nimport Details from '../components/Details';\nimport ProductsGrid from \"../components/ProductsGrid\";\nimport { useParams } from 'react-router-dom';\nexport default function ProductPage(props) {\n  // get the name of the current product from the URL \n  const itemName = useParams().id; // A - Get the item from the list of items (data) that have the same name of the current product + pass it using props\n\n  const item = props.items.filter(item => {\n    return item.name === itemName;\n  })[0]; // ##############################\n  // B- Calculate the quantity of the current product \n  //1- create an array that contains the repeated product\n\n  const currentItem = props.orders.filter(item => {\n    return item.name === itemName;\n  }); //2- calculate the quantity of the current product\n\n  const itemQuantity = currentItem.length; //################################\n  // C- Passe the new order to the parent component (<App/>)\n\n  function handleCartData(newOrderName) {\n    props.cartChange(newOrderName);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Details, {\n    quantity: itemQuantity,\n    item: item,\n    cartChange: handleCartData,\n    orders: props.orders,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    className: \"grid-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Might also like\"), React.createElement(ProductsGrid, {\n    limit: 3,\n    items: props.items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/issam/Desktop/WebDev/Barmej_Bootcamp/03_ReactJS_/Project/Fullstck-Project-4-master/src/pages/ProductPage.js"],"names":["React","Details","ProductsGrid","useParams","ProductPage","props","itemName","id","item","items","filter","name","currentItem","orders","itemQuantity","length","handleCartData","newOrderName","cartChange"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACvC;AACA,QAAMC,QAAQ,GAAGH,SAAS,GAAGI,EAA7B,CAFuC,CAGvC;;AACA,QAAMC,IAAI,GAAGH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAoBF,IAAD,IAAQ;AACpC,WAAOA,IAAI,CAACG,IAAL,KAAcL,QAArB;AACH,GAFY,EAEV,CAFU,CAAb,CAJuC,CAQvC;AAEA;AAEA;;AACA,QAAMM,WAAW,GAAGP,KAAK,CAACQ,MAAN,CAAaH,MAAb,CAAqBF,IAAD,IAAQ;AAC5C,WAAOA,IAAI,CAACG,IAAL,KAAcL,QAArB;AACH,GAFmB,CAApB,CAbuC,CAgBvC;;AACA,QAAMQ,YAAY,GAAGF,WAAW,CAACG,MAAjC,CAjBuC,CAmBvC;AAEA;;AACA,WAASC,cAAT,CAAwBC,YAAxB,EAAsC;AAClCZ,IAAAA,KAAK,CAACa,UAAN,CAAiBD,YAAjB;AACH;;AAED,SACI,0CACI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAGH,YAApB;AAAkC,IAAA,IAAI,EAAIN,IAA1C;AAAgD,IAAA,UAAU,EAAEQ,cAA5D;AAA4E,IAAA,MAAM,EAAEX,KAAK,CAACQ,MAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFJ,EAGI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,CAArB;AAAwB,IAAA,KAAK,EAAER,KAAK,CAACI,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAQH","sourcesContent":["import React from 'react'\nimport Details from '../components/Details'\nimport ProductsGrid from \"../components/ProductsGrid\"\nimport { useParams } from 'react-router-dom'\n\nexport default function ProductPage(props) {\n    // get the name of the current product from the URL \n    const itemName = useParams().id\n    // A - Get the item from the list of items (data) that have the same name of the current product + pass it using props\n    const item = props.items.filter((item)=>{\n        return item.name === itemName\n    })[0];\n\n    // ##############################\n\n    // B- Calculate the quantity of the current product \n    \n    //1- create an array that contains the repeated product\n    const currentItem = props.orders.filter((item)=>{\n        return item.name === itemName\n    })\n    //2- calculate the quantity of the current product\n    const itemQuantity = currentItem.length\n\n    //################################\n\n    // C- Passe the new order to the parent component (<App/>)\n    function handleCartData(newOrderName) {\n        props.cartChange(newOrderName)\n    }\n\n    return (\n        <>\n            <Details quantity= {itemQuantity} item = {item} cartChange={handleCartData} orders={props.orders}/>\n            <h3 className='grid-title'>Might also like</h3>\n            <ProductsGrid limit={3} items={props.items} />\n\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}